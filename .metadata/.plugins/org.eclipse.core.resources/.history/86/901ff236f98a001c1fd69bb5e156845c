package com.abhisek.mindtree.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.abhisek.mindtree.model.Cart;
import com.abhisek.mindtree.repository.CartRepository;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

@Service
public class CartServiceImplementation implements CartService {
	@Autowired
	CartRepository cartRepository;

	@Override
	public List<Cart> getAllCartItems(long userSessionId) {
		List<Cart> cartItems = cartRepository.findAllCartItems(userSessionId);
		return cartItems;
	}

	@Override
	public Cart saveItem(Cart cart) {
		Cart savedCartItem = null;

		if (cartRepository.existsCartItemCustomQuery(cart.getUserId(), cart.getProductId())) {
			Optional<Cart> productInCart = Optional
					.of(cartRepository.findCartItem(cart.getUserId(), cart.getProductId()));
			if (productInCart.isPresent()) {
				int productQuantityInCart = productInCart.get().getQuantity();
				Double cartSubTotal=productInCart.get().getSubTotal();
				cartSubTotal=cartSubTotal+(cart.getPrice());
				productQuantityInCart = productQuantityInCart + cart.getQuantity();
				productInCart.get().setQuantity(productQuantityInCart);
				productInCart.get().setSubTotal(cartSubTotal);
				savedCartItem = cartRepository.save(productInCart.get());
			}

		} else {
			cart.setSubTotal(cart.getPrice());
			savedCartItem = cartRepository.save(cart);
		}

		return savedCartItem;
	}

	@Override
	public boolean deleteItem(Cart cart) {
		if (cartRepository.existsCartItemCustomQuery(cart.getUserId(), cart.getProductId())) {
			Optional<Cart> productInCart = Optional
					.of(cartRepository.findCartItem(cart.getUserId(), cart.getProductId()));
			if (productInCart.isPresent()) {
				int productQuantityInCart = productInCart.get().getQuantity();
				if (productQuantityInCart > 0 && productQuantityInCart > cart.getQuantity()) {
					productQuantityInCart = productQuantityInCart - cart.getQuantity();
					productInCart.get().setQuantity(productQuantityInCart);
					Optional<Cart> updatedCartItem = Optional.of(cartRepository.save(productInCart.get()));
					if (updatedCartItem.isPresent()) {
						return true;
					} else {
						return false;
					}
				} else {
					cartRepository.deleteCartItem(cart.getUserId(), cart.getProductId());
					return true;
				}
			} else {
				return false;
			}
		}
		return false;
	}
}
